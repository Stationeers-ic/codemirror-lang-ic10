import { styleTags, tags } from '@lezer/highlight';
import { LRParser } from '@lezer/lr';
import { LRLanguage, indentNodeProp, delimitedIndent, foldNodeProp, foldInside, LanguageSupport } from '@codemirror/language';

// This file was generated by lezer-generator. You probably shouldn't edit it.
const parser = LRParser.deserialize({
  version: 14,
  states: "hQYQPOOOOQO'#C`'#C`QYQPOOOOQO-E6^-E6^",
  stateData: "_~OVOSPOS~ORPO~O",
  goto: "[TPPPPUQQORRQ",
  nodeNames: "âš  LineComment Program Line",
  maxTerm: 7,
  skippedNodes: [0,1],
  repeatNodeCount: 1,
  tokenData: ",Y~RZXYtYZt]^tpqtst!V!c!}!n#T#a!n#a#b#V#b#g!n#g#h+g#h#o!n~ySV~XYtYZt]^tpqt~![SP~OY!VZ;'S!V;'S;=`!h<%lO!V~!kP;=`<%l!V~!qR![!]!z!c!}!n#T#o!n~!}PYZ#Q~#VOR~~#YT![!]!z!c!}!n#T#c!n#c#d#i#d#o!n~#lT![!]!z!c!}!n#T#j!n#j#k#{#k#o!n~$OT![!]!z!c!}!n#T#X!n#X#Y$_#Y#o!n~$b[YZ#Q}!O%W!Q![%W![!]!z!c!}$_#R#S%W#T#W$_#W#X(m#X#f$_#f#g)l#g#h*h#h#o$_~%ZZYZ#Q}!O%W!Q![%W!c!}%W#R#S%W#T#W%W#W#X%|#X#f%W#f#g&x#g#h'q#h#o%W~&P]YZ#Q}!O%W!Q![%W!c!}%W#R#S%W#T#U%W#U#V%W#V#W%W#W#X%|#X#f%W#f#g&x#g#h'q#h#o%W~&{[YZ#Q}!O%W!Q![%W!c!}%W#R#S%W#T#U%W#U#W%W#W#X%|#X#f%W#f#g&x#g#h'q#h#o%W~'t]YZ#Q}!O%W!Q![%W!c!}%W#R#S%W#T#W%W#W#X%|#X#d%W#d#e%W#e#f%W#f#g&x#g#h'q#h#o%W~(p^YZ#Q}!O%W!Q![%W![!]!z!c!}$_#R#S%W#T#U$_#U#V$_#V#W$_#W#X(m#X#f$_#f#g)l#g#h*h#h#o$_~)o]YZ#Q}!O%W!Q![%W![!]!z!c!}$_#R#S%W#T#U$_#U#W$_#W#X(m#X#f$_#f#g)l#g#h*h#h#o$_~*k^YZ#Q}!O%W!Q![%W![!]!z!c!}$_#R#S%W#T#W$_#W#X(m#X#d$_#d#e$_#e#f$_#f#g)l#g#h*h#h#o$_~+jT![!]!z!c!}!n#T#b!n#b#c+y#c#o!n~+|S![!]!z!c!}!n#T#U$_#U#o!n",
  tokenizers: [0],
  topRules: {"Program":[0,2]},
  tokenPrec: 0
});

const icLanguage = LRLanguage.define({
    name: "ic10",
    parser: parser.configure({
        props: [
            indentNodeProp.add({
                Application: delimitedIndent({ closing: ")", align: false }),
            }),
            foldNodeProp.add({
                Application: foldInside,
            }),
            styleTags({
                Identifier: tags.variableName,
                Number: tags.number,
                RegDev: tags.bool,
                String: tags.string,
                LineComment: tags.lineComment,
            }),
        ],
    }),
    languageData: {
        commentTokens: { line: "#" },
    },
});
function ic10() {
    return new LanguageSupport(icLanguage);
}

export { ic10, icLanguage };
