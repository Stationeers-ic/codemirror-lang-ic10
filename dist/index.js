import { styleTags, tags } from '@lezer/highlight';
import { LRParser } from '@lezer/lr';
import { LRLanguage, indentNodeProp, delimitedIndent, foldNodeProp, foldInside, LanguageSupport } from '@codemirror/language';

// This file was generated by lezer-generator. You probably shouldn't edit it.
const parser = LRParser.deserialize({
  version: 14,
  states: "nQYQPOOOOQO'#Cg'#CgOOQO'#Cc'#CcQYQPOOOOQO-E6a-E6a",
  stateData: "m~OYOSPOS~ORPOSPOTPOUPO~OUTRT~",
  goto: "g[PPPPPPP]PPPcQRORSRTQOR",
  nodeNames: "âš  LineComment Program Identifier String Number RegDev",
  maxTerm: 11,
  skippedNodes: [0,1],
  repeatNodeCount: 1,
  tokenData: "*]~R`XY!TYZ!T]^!Tpq!Trs!fst$S}!O$k!Q![%P!c!}$k#R#S$k#T#W$k#W#X'p#X#f$k#f#g)Y#g#h)q#h#o$k~!YSY~XY!TYZ!T]^!Tpq!T~!iVOr!frs#Os#O!f#O#P#T#P;'S!f;'S;=`#|<%lO!f~#TOS~~#WRO;'S!f;'S;=`#a;=`O!f~#dWOr!frs#Os#O!f#O#P#T#P;'S!f;'S;=`#|;=`<%l!f<%lO!f~$PP;=`<%l!f~$XSP~OY$SZ;'S$S;'S;=`$e<%lO$S~$hP;=`<%l$S~$pTR~}!O$k!Q![$k!c!}$k#R#S$k#T#o$k~%U]R~O}%}}!O&S!O!Q%}!Q![&j![!c%}!c!}$k!}#R%}#R#S&S#S#T%}#T#o$k#o;'S%};'S;=`'j<%lO%}~&SOT~~&ZTT~R~}!O$k!Q![$k!c!}$k#R#S$k#T#o$k~&q]T~R~O}%}}!O&S!O!Q%}!Q![&j![!c%}!c!}$k!}#R%}#R#S&S#S#T%}#T#o$k#o;'S%};'S;=`'j<%lO%}~'mP;=`<%l%}~'uVR~}!O$k!Q![([!c!}$k#R#S$k#T#U$k#U#V(r#V#o$k~(cTU~R~}!O$k!Q![([!c!}$k#R#S$k#T#o$k~(yTU~R~}!O$k!Q![$k!c!}$k#R#S$k#T#o$k~)_UR~}!O$k!Q![([!c!}$k#R#S$k#T#U(r#U#o$k~)vVR~}!O$k!Q![$k!c!}$k#R#S$k#T#d$k#d#e(r#e#o$k",
  tokenizers: [0],
  topRules: {"Program":[0,2]},
  tokenPrec: 24
});

const icLanguage = LRLanguage.define({
    name: "ic10",
    parser: parser.configure({
        props: [
            indentNodeProp.add({
                Application: delimitedIndent({ closing: ")", align: false }),
            }),
            foldNodeProp.add({
                Application: foldInside,
            }),
            styleTags({
                Identifier: tags.variableName,
                Number: tags.number,
                RegDev: tags.bool,
                String: tags.string,
                LineComment: tags.lineComment,
            }),
        ],
    }),
    languageData: {
        commentTokens: { line: "#" },
    },
});
function ic10() {
    return new LanguageSupport(icLanguage);
}

export { ic10, icLanguage };
