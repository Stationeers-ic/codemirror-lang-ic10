import { styleTags, tags } from '@lezer/highlight';
import { LRParser } from '@lezer/lr';
import { LRLanguage, indentNodeProp, delimitedIndent, foldNodeProp, foldInside, LanguageSupport } from '@codemirror/language';

// This file was generated by lezer-generator. You probably shouldn't edit it.
const parser = LRParser.deserialize({
  version: 14,
  states: "nQYQPOOOOQO'#Cf'#CfOOQO'#Cb'#CbQYQPOOOOQO-E6`-E6`",
  stateData: "h~OXOSPOS~ORPOSPOTPO~OTR~",
  goto: "fZPPPPPP[PPPbQRORSRTQOR",
  nodeNames: "âš  LineComment Program Identifier String Number",
  maxTerm: 10,
  skippedNodes: [0,1],
  repeatNodeCount: 1,
  tokenData: "%W~RZXYtYZt]^tpqtrs!Vst#s}!O$[!Q![$p!c!}$[#R#S$[#T#o$[~ySX~XYtYZt]^tpqt~!YVOr!Vrs!os#O!V#O#P!t#P;'S!V;'S;=`#m<%lO!V~!tOS~~!wRO;'S!V;'S;=`#Q;=`O!V~#TWOr!Vrs!os#O!V#O#P!t#P;'S!V;'S;=`#m;=`<%l!V<%lO!V~#pP;=`<%l!V~#xSP~OY#sZ;'S#s;'S;=`$U<%lO#s~$XP;=`<%l#s~$aTR~}!O$[!Q![$[!c!}$[#R#S$[#T#o$[~$wTT~R~}!O$[!Q![$p!c!}$[#R#S$[#T#o$[",
  tokenizers: [0],
  topRules: {"Program":[0,2]},
  tokenPrec: 21
});

const icLanguage = LRLanguage.define({
    name: "ic10",
    parser: parser.configure({
        props: [
            indentNodeProp.add({
                Application: delimitedIndent({ closing: ")", align: false }),
            }),
            foldNodeProp.add({
                Application: foldInside,
            }),
            styleTags({
                Identifier: tags.variableName,
                Number: tags.number,
                RegDev: tags.bool,
                String: tags.string,
                LineComment: tags.lineComment,
            }),
        ],
    }),
    languageData: {
        commentTokens: { line: "#" },
    },
});
function ic10() {
    return new LanguageSupport(icLanguage);
}

export { ic10, icLanguage };
