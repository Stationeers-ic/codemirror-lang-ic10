import { styleTags, tags } from '@lezer/highlight';
import { LRParser } from '@lezer/lr';
import { LRLanguage, LanguageSupport } from '@codemirror/language';
import { snippetCompletion } from '@codemirror/autocomplete';

// This file was generated by lezer-generator. You probably shouldn't edit it.
const parser = LRParser.deserialize({
  version: 14,
  states: "#YOVQPOOOkQPO'#CfO!RQQO'#C_OOQO'#C^'#C^O!`QPO'#C^O!hQPO'#C^QOQPOOO!sQPO,59QOOQO'#Ca'#CaOOQO'#Ck'#CkO!xQQO,58yOOQO,58x,58xO#VQPO,58xO#_QPO1G.lOOQO-E6i-E6iOOQO1G.d1G.dOOQO7+$W7+$W",
  stateData: "#m~ObOS~OSQOZPO]TO^SOeRO`QP~OcVO~OUWOVWOWWOXWOZPO~O^RX`RXeRX~PpOeZO`QX~O^[OeZO`QX~O[]O~O^Ra`RaeRa~PpOe_O`Qa~Od`O~O[UVWZXSW~",
  goto: "x`PPadPgPPPPkPPPPrRUORTOTXQYQTOTWQYQYQR^Y",
  nodeNames: "âš  Program Line OperatorLine Instruction Argument Register Device Number Identifier Hash Function String Label LineComment",
  maxTerm: 21,
  skippedNodes: [0],
  repeatNodeCount: 1,
  tokenData: "!Dl~RwXY#lYZ#z]^#lpq#lrs$Pst%mwx&Uxy(}yz)S}!O)X!Q![)m!c!j*f!j!k+S!k!}*f#R#S)X#T#U-e#U#V5z#V#WE[#W#XFn#X#YKS#Y#ZL`#Z#[Nx#[#]!!u#]#^*f#^#_!$R#_#`*f#`#a!$u#a#b!)^#b#c!+n#c#dNZ#d#e!-Q#e#f*f#f#g!1]#g#h!4b#h#i!@U#i#l*f#l#mMl#m#n!Bq#n#o*f~#qRb~XY#l]^#lpq#l~$POe~~$SVOr$Prs$is#O$P#O#P$n#P;'S$P;'S;=`%g<%lO$P~$nO[~~$qRO;'S$P;'S;=`$z;=`O$P~$}WOr$Prs$is#O$P#O#P$n#P;'S$P;'S;=`%g;=`<%l$P<%lO$P~%jP;=`<%l$P~%rS^~OY%mZ;'S%m;'S;=`&O<%lO%m~&RP;=`<%l%m~&XWOr&Usw&Uwx&qx#O&U#O#P'{#P;'S&U;'S;=`(w<%lO&U~&tWOr&Usw&Uwx'^x#O&U#O#P'{#P;'S&U;'S;=`(w<%lO&U~'cW[~Or&Usw&Uwx'^x#O&U#O#P'{#P;'S&U;'S;=`(w<%lO&U~(ORO;'S&U;'S;=`(X;=`O&U~([XOr&Usw&Uwx&qx#O&U#O#P'{#P;'S&U;'S;=`(w;=`<%l&U<%lO&U~(zP;=`<%l&U~)SOc~~)XOd~Q)^TXQ}!O)X!Q![)X!c!})X#R#S)X#T#o)X~)tUW~XQ}!O)X!O!P*W!Q![)m!c!})X#R#S)X#T#o)X~*ZP!Q![*^~*cPW~!Q![*^R*kUXQ}!O)X!Q![)X![!]*}!c!}*f#R#S)X#T#o*fP+SO]P~+XVXQ}!O)X!Q![)X![!]*}!c!d+n!d!}*f#R#S)X#T#o*f~+sWXQ}!O)X!Q![)X![!]*}!c!u*f!u!v,]!v!}*f#R#S)X#T#o*f~,bWXQ}!O)X!Q![)X![!]*}!c!j*f!j!k,z!k!}*f#R#S)X#T#o*f~-RUZ~XQ}!O)X!Q![)X![!]*}!c!}*f#R#S)X#T#o*f~-jaXQ}!O)X!Q![)X![!]*}!c!}*f#R#S)X#T#U*f#U#V.o#V#W/w#W#X0f#X#`*f#`#a1T#a#b*f#b#c0f#c#g*f#g#h2^#h#i3j#i#o*f~.tWXQ}!O)X!Q![)X![!]*}!c!}*f#R#S)X#T#g*f#g#h/^#h#o*f~/eUXQS~}!O)X!Q![)X![!]*}!c!}*f#R#S)X#T#o*f~/|WXQ}!O)X!Q![)X![!]*}!c!}*f#R#S)X#T#c*f#c#d.o#d#o*f~0kWXQ}!O)X!Q![)X![!]*}!c!}*f#R#S)X#T#W*f#W#X/^#X#o*f~1YWXQ}!O)X!Q![)X![!]*}!c!}*f#R#S)X#T#]*f#]#^1r#^#o*f~1wVXQ}!O)X!Q![)X![!]*}!c!}*f#R#S)X#T#U.o#U#o*f~2cWXQ}!O)X!Q![)X![!]*}!c!}*f#R#S)X#T#]*f#]#^2{#^#o*f~3QWXQ}!O)X!Q![)X![!]*}!c!}*f#R#S)X#T#b*f#b#c/^#c#o*f~3oVXQ}!O)X!Q![)X![!]*}!c!}*f#R#S)X#T#U4U#U#o*f~4ZWXQ}!O)X!Q![)X![!]*}!c!}*f#R#S)X#T#b*f#b#c4s#c#o*f~4zWXQS~}!O)X!Q!S)X!S!T5d!T![)X![!]*}!c!}*f#R#S)X#T#o*f~5kTXQS~}!O)X!Q![)X!c!})X#R#S)X#T#o)X~6PbXQ}!O)X!Q![)X![!]*}!c!}*f#R#S)X#T#U7X#U#W*f#W#X9r#X#Y;s#Y#Z*f#Z#[<b#[#`*f#`#a<b#a#b*f#b#c=V#c#f*f#f#g>n#g#o*f~7^WXQ}!O)X!Q![)X![!]*}!c!}*f#R#S)X#T#d*f#d#e7v#e#o*f~7}WXQS~}!O)X!Q![)X![!]*}!c!}*f#R#S)X#T#U8g#U#n*f#n#o9U~8lWXQ}!O)X!Q![)X![!]*}!c!}*f#R#S)X#T#`*f#`#a/^#a#o*f~9]VXQS~}!O)X!Q![)X![!]*}!c!}*f#R#S)X#T#U8g#U#o*f~9wYXQ}!O)X!Q![)X![!]*}!c!}*f#R#S)X#T#b*f#b#c:g#c#g*f#g#h;U#h#o*f~:lWXQ}!O)X!Q![)X![!]*}!c!}*f#R#S)X#T#g*f#g#h9U#h#o*f~;ZWXQ}!O)X!Q![)X![!]*}!c!}*f#R#S)X#T#X*f#X#Y9U#Y#o*f~;xWXQ}!O)X!Q![)X![!]*}!c!}*f#R#S)X#T#e*f#e#f7v#f#o*f~<gYXQ}!O)X!Q![)X![!]*}!c!}*f#R#S)X#T#X*f#X#Y7v#Y#h*f#h#i7v#i#o*f~=[XXQ}!O)X!Q![)X![!]*}!c!}*f#R#S)X#T#U=w#U#X*f#X#Y7v#Y#o*f~>OYXQS~}!O)X!Q![)X![!]*}!c!}*f#R#S)X#T#U8g#U#b*f#b#c/^#c#n*f#n#o9U~>s`XQ}!O)X!Q![)X![!]*}!c!}*f#R#S)X#T#U?u#U#W*f#W#XAQ#X#YBd#Y#Z*f#Z#[CR#[#`*f#`#aCR#a#b*f#b#cCv#c#o*f~?zWXQ}!O)X!Q![)X![!]*}!c!}*f#R#S)X#T#d*f#d#e@d#e#o*f~@kVXQS~}!O)X!Q![)X![!]*}!c!}*f#R#S)X#T#n*f#n#o/^~AVYXQ}!O)X!Q![)X![!]*}!c!}*f#R#S)X#T#b*f#b#c.o#c#g*f#g#hAu#h#o*f~AzWXQ}!O)X!Q![)X![!]*}!c!}*f#R#S)X#T#X*f#X#Y/^#Y#o*f~BiWXQ}!O)X!Q![)X![!]*}!c!}*f#R#S)X#T#e*f#e#f@d#f#o*f~CWYXQ}!O)X!Q![)X![!]*}!c!}*f#R#S)X#T#X*f#X#Y@d#Y#h*f#h#i@d#i#o*f~C{XXQ}!O)X!Q![)X![!]*}!c!}*f#R#S)X#T#UDh#U#X*f#X#Y@d#Y#o*f~DoXXQS~}!O)X!Q![)X![!]*}!c!}*f#R#S)X#T#b*f#b#c/^#c#n*f#n#o/^~EaYXQ}!O)X!Q![)X![!]*}!c!}*f#R#S)X#T#X*f#X#YFP#Y#c*f#c#d.o#d#o*f~FUWXQ}!O)X!Q![)X![!]*}!c!}*f#R#S)X#T#]*f#]#^8g#^#o*f~Fs[XQ}!O)X!Q![Gi![!]*}!c!}*f#R#S)X#T#U*f#U#VHP#V#X*f#X#YHj#Y#]*f#]#^Je#^#o*fQGpTVQXQ}!O)X!Q![Gi!c!})X#R#S)X#T#o)XRHWUVQXQ}!O)X!Q![)X![!]*}!c!}*f#R#S)X#T#o*f~HoWXQ}!O)X!Q![)X![!]*}!c!}*f#R#S)X#T#Y*f#Y#ZIX#Z#o*f~I^WXQ}!O)X!Q![)X![!]*}!c!}*f#R#S)X#T#]*f#]#^Iv#^#o*f~I{WXQ}!O)X!Q![)X![!]*}!c!}*f#R#S)X#T#b*f#b#cAu#c#o*f~JjWXQ}!O)X!Q![)X![!]*}!c!}*f#R#S)X#T#j*f#j#k/^#k#o*f~KXWXQ}!O)X!Q![)X![!]*}!c!}*f#R#S)X#T#l*f#l#mKq#m#o*f~KvWXQ}!O)X!Q![)X![!]*}!c!}*f#R#S)X#T#d*f#d#e/^#e#o*f~LeWXQ}!O)X!Q![)X![!]*}!c!}*f#R#S)X#T#`*f#`#aL}#a#o*f~MSWXQ}!O)X!Q![)X![!]*}!c!}*f#R#S)X#T#c*f#c#dMl#d#o*f~MqWXQ}!O)X!Q![)X![!]*}!c!}*f#R#S)X#T#c*f#c#dNZ#d#o*f~N`WXQ}!O)X!Q![)X![!]*}!c!}*f#R#S)X#T#f*f#f#g/^#g#o*f~N}WXQ}!O)X!Q![)X![!]*}!c!}*f#R#S)X#T#X*f#X#Y! g#Y#o*f~! lWXQ}!O)X!Q![)X![!]*}!c!}*f#R#S)X#T#h*f#h#i!!U#i#o*f~!!]WXQS~}!O)X!Q![)X![!]*}!c!}*f#R#S)X#T#W*f#W#X/^#X#o*f~!!zWXQ}!O)X!Q![)X![!]*}!c!}*f#R#S)X#T#V*f#V#W!#d#W#o*f~!#iWXQ}!O)X!Q![)X![!]*}!c!}*f#R#S)X#T#Y*f#Y#Z/^#Z#o*f~!$YXXQS~}!O)X!Q![)X![!]*}!c!}*f#R#S)X#T#U8g#U#f*f#f#g/^#g#o*f~!$|_XQS~}!O)X!Q![)X![!]*}!c!}*f#R#S)X#T#U!%{#U#V!'X#V#W*f#W#X/^#X#c*f#c#d!(o#d#f*f#f#g/^#g#h/^#h#o*f~!&QWXQ}!O)X!Q![)X![!]*}!c!}*f#R#S)X#T#U*f#U#V!&j#V#o*f~!&oWXQ}!O)X!Q![)X![!]*}!c!}*f#R#S)X#T#X*f#X#Y8g#Y#o*f~!'`YXQS~}!O)X!Q![)X![!]*}!c!}*f#R#S)X#T#b*f#b#c!(O#c#g*f#g#h/^#h#o*f~!(VWXQS~}!O)X!Q![)X![!]*}!c!}*f#R#S)X#T#g*f#g#h/^#h#o*f~!(tWXQ}!O)X!Q![)X![!]*}!c!}*f#R#S)X#T#Z*f#Z#[/^#[#o*f~!)c]XQ}!O)X!Q![)X![!]*}!c!}*f#R#S)X#T#U!*[#U#]*f#]#^2{#^#c*f#c#d!*y#d#i*f#i#j8g#j#o*f~!*aWXQ}!O)X!Q![)X![!]*}!c!}*f#R#S)X#T#l*f#l#m/^#m#o*f~!+OYXQ}!O)X!Q![)X![!]*}!c!}*f#R#S)X#T#W*f#W#X/^#X#j*f#j#kAu#k#o*f~!+sWXQ}!O)X!Q![)X![!]*}!c!}*f#R#S)X#T#c*f#c#d!,]#d#o*f~!,bYXQ}!O)X!Q![)X![!]*}!c!}*f#R#S)X#T#f*f#f#g/^#g#h*f#h#i/^#i#o*f~!-V[XQ}!O)X!Q![)X![!]*}!c!}*f#R#S)X#T#X*f#X#Y!-{#Y#c*f#c#d!/X#d#i*f#i#j!/|#j#o*f~!.QWXQ}!O)X!Q![)X![!]*}!c!}*f#R#S)X#T#X*f#X#Y!.j#Y#o*f~!.oWXQ}!O)X!Q![)X![!]*}!c!}*f#R#S)X#T#_*f#_#`/^#`#o*f~!/^YXQ}!O)X!Q![)X![!]*}!c!}*f#R#S)X#T#_*f#_#`Au#`#d*f#d#e/^#e#o*f~!0RXXQ}!O)X!Q![)X![!]*}!c!}*f#R#S)X#T#g*f#g#h!0n#h#i!!U#i#o*f~!0sWXQ}!O)X!Q![)X![!]*}!c!}*f#R#S)X#T#[*f#[#]/^#]#o*f~!1bXXQ}!O)X!Q![!1}![!]*}!c!}*f#R#S)X#T#U!2e#U#c*f#c#d!3U#d#o*fQ!2UTUQXQ}!O)X!Q![!1}!c!})X#R#S)X#T#o)X~!2lWUQXQ}!O)X!Q![)X![!]*}!c!}*f#R#S)X#T#b*f#b#c0f#c#o*f~!3ZWXQ}!O)X!Q![)X![!]*}!c!}*f#R#S)X#T#i*f#i#j!3s#j#o*f~!3xWXQ}!O)X!Q![)X![!]*}!c!}*f#R#S)X#T#b*f#b#c0f#c#o*f~!4ijXQS~}!O)X!Q![)X![!]*}!c!}*f#R#S)X#T#U?u#U#V!6Z#V#W*f#W#X!7Q#X#Y!7w#Y#Z*f#Z#[CR#[#]*f#]#^2{#^#`*f#`#a!:g#a#b*f#b#c!<X#c#d*f#d#e!=m#e#f!>W#f#g!>u#g#h/^#h#i*f#i#j!?g#j#o*f~!6bYXQS~}!O)X!Q![)X![!]*}!c!}*f#R#S)X#T#b*f#b#c/^#c#g*f#g#h/^#h#o*f~!7XYXQS~}!O)X!Q![)X![!]*}!c!}*f#R#S)X#T#b*f#b#c.o#c#g*f#g#hAu#h#o*f~!7|YXQ}!O)X!Q![)X![!]*}!c!}*f#R#S)X#T#`*f#`#a!8l#a#e*f#e#f@d#f#o*f~!8qWXQ}!O)X!Q![)X![!]*}!c!}*f#R#S)X#T#X*f#X#Y!9Z#Y#o*f~!9`WXQ}!O)X!Q![)X![!]*}!c!}*f#R#S)X#T#V*f#V#W!9x#W#o*f~!9}WXQ}!O)X!Q![)X![!]*}!c!}*f#R#S)X#T#h*f#h#i/^#i#o*f~!:l]XQ}!O)X!Q![)X![!]*}!c!}*f#R#S)X#T#U/^#U#X*f#X#Y!;e#Y#`*f#`#a/^#a#h*f#h#i@d#i#o*f~!;lXXQS~}!O)X!Q![)X![!]*}!c!}*f#R#S)X#T#X*f#X#YKq#Y#n*f#n#o/^~!<^XXQ}!O)X!Q![)X![!]*}!c!}*f#R#S)X#T#U!<y#U#X*f#X#Y@d#Y#o*f~!=QXXQS~}!O)X!Q![)X![!]*}!c!}*f#R#S)X#T#b*f#b#c@d#c#n*f#n#o/^R!=tUUQXQ}!O)X!Q![)X![!]*}!c!}*f#R#S)X#T#o*f~!>]WXQ}!O)X!Q![)X![!]*}!c!}*f#R#S)X#T#f*f#f#g!9x#g#o*f~!>zXXQ}!O)X!Q![)X![!]*}!c!}*f#R#S)X#T#U/^#U#`*f#`#a/^#a#o*f~!?lWXQ}!O)X!Q![)X![!]*}!c!}*f#R#S)X#T#U*f#U#V/^#V#o*f~!@ZXXQ}!O)X!Q![)X![!]*}!c!}*f#R#S)X#T#U2{#U#f*f#f#g!@v#g#o*f~!@{WXQ}!O)X!Q![)X![!]*}!c!}*f#R#S)X#T#i*f#i#j!Ae#j#o*f~!AjWXQ}!O)X!Q![)X![!]*}!c!}*f#R#S)X#T#b*f#b#c!BS#c#o*f~!BXWXQ}!O)X!Q![)X![!]*}!c!}*f#R#S)X#T#V*f#V#W/^#W#o*f~!BvWXQ}!O)X!Q![)X![!]*}!c!}*f#R#S)X#T#]*f#]#^!C`#^#o*f~!CeWXQ}!O)X!Q![)X![!]*}!c!}*f#R#S)X#T#X*f#X#Y!C}#Y#o*f~!DSWXQ}!O)X!Q![)X![!]*}!c!}*f#R#S)X#T#`*f#`#a0f#a#o*f",
  tokenizers: [0, 1],
  topRules: {"Program":[0,1]},
  tokenPrec: 112
});

const icLanguage = LRLanguage.define({
    name: "ic10",
    parser: parser.configure({
        props: [
            styleTags({
                String: tags.string,
                Register: tags.name,
                Device: tags.bool,
                Number: tags.number,
                Function: tags.self,
                Identifier: tags.string,
                Instruction: tags.keyword,
                LineComment: tags.comment,
                Label: tags.propertyName,
            }),
        ],
    }),
    languageData: {
        commentTokens: { line: "#" },
    },
});
function getPos(context) {
    const pos = context.state.doc.lineAt(context.pos);
    return {
        text: pos.text,
        line: pos.number,
        pos: context.pos - pos.from,
    };
}
function isFirstWord(line, pos) {
    return line.substring(0, pos).match(/\s*\w*$/)?.index === 0;
}
function myCompletions(context) {
    const word = context.matchBefore(/\w*/);
    if (word?.from == word?.to && !context.explicit)
        return null;
    const reg = /^\s*alias\s+(\w+)\s+(\w+)/;
    console.log(context);
    console.log(getPos(context));
    const line = getPos(context);
    const text = context.state.doc.text;
    const variables = [];
    text.forEach((x) => {
        const test = reg.exec(x);
        if (test === null)
            return;
        variables.push({ label: test[1], type: "variable", apply: test[1] + " ", detail: test[2], boost: 10 });
    });
    const firstWord = isFirstWord(line.text, line.pos);
    const snippets = [
        snippetCompletion("alias ${} ${r0}", {
            boost: -10,
            label: "alias",
            info: "Labels register or device reference with name, device references also affect what shows on the screws on the IC base.",
        }),
    ];
    return {
        from: word?.from ?? context.pos,
        options: [
            ...(firstWord ? snippets : variables),
            { label: "constant", type: "constant" },
            { label: "enum", type: "enum" },
            { label: "function", type: "function" },
            { label: "interface", type: "interface" },
            { label: "keyword", type: "keyword" },
            { label: "method", type: "method" },
            { label: "namespace", type: "namespace" },
            { label: "property", type: "property" },
            { label: "text", type: "text" },
            { label: "type", type: "type" },
            { label: "variable", type: "variable" },
        ],
    };
}
const snippets = icLanguage.data.of({
    autocomplete: myCompletions,
});
function ic10() {
    return new LanguageSupport(icLanguage);
}

export { ic10, icLanguage, snippets };
